3.2.1 引用计数算法
	ReferenceGC.class
	该程序说明了Java虚拟机不是通过该算法来判断对象存活状态的，但是，本机测试并无运行结果
	无法测试

3.2.4   ...代码为完成  需要后续完成

3.3  垃圾收集算法

3.3.1 标记-清除 算法
		标记完成需要回收的对象后统一清除  
		不足：效率低 产生大量不连续内存碎片
3.3.2 复制 算法
		将内存划分为三块空间 一块Eden 两块Survivor 内存大小比例为8:1:1
		每次使用Eden和一块Survivor 回收时，将存活的对象一次性的复制到另一块Survivor上
		若改Survivor空间不够存放，这些对象将直接进入老年代中
3.3.3 标记-整理 算法
		适合老年代对象，让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存
3.3.4 分代收集 算法
		根据对象存活周期将内存分为不同的区域  Java堆一般分新生代 老年代

3.4 安全点和安全区域可补充


3.5 垃圾收集器
	3.5.1 Serial（新生代）和Serial Old（老年代）收集器
			单线程收集器，主要在Client模式下使用
	3.5.2 ParNew（新生代）收集器 
			Serial收集器的多线程版本
	3.5.3 Parallel（新生代）和parallel Old（老年代）收集器
			可控制的吞吐量，以及垃圾收集停顿时间
			适合在后台运算
	3.5.4 CMS收集器
			停顿时间短，服务器响应速度快，但cpu占用率高，无法处理浮动垃圾，产生大量内存碎片
	3.5.5 G1收集器
			整体采用标记-整理 算法，局部采用复制 算法，支持分代收集，停顿可预测
			将整个Java堆划分为多个大小相等的区域（Region），G1跟踪各个Region的垃圾堆积大小
			后台维护一个优先级列表，优先回收价值最大的Region

3.6 内存分配策略

3.6.1 对象优先在Eden上分配
	Minor.class
	命令行测试语句
	java MinorGC -verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8
	在命令行测试无结果输出 
3.6.2 大对象直接进入老年代
	在Serial和ParNew收集器中可使用-XX：PretenureSizeThreshold参数设置，令大于这个设置值的对象直接 
	在老年代中分配
3.6.3 长期存活的对象进入老年代
	在Eden区出生的对象经过第一次Minor GC后能存活并进入到Survivor区中，每一次Minor GC对象年龄加一
	当年龄增加到阀值时，将会进入老年代
	可通过-XX:MaxTenuringThreshold来设置对象晋升到老年代的年龄阀值
3.6.4 动态对象年龄判断
	如果Survivor空间中相同年龄所有对象大小的总和大于其空间的一半，年龄大于或等于该年龄的对象可直接
	进入老年代



   


			





















